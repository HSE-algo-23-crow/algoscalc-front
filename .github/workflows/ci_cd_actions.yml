name: "CI/CD actions"
on:
  push:
    tags:
      - 'v*'
    branches:
      - Test
      - Prod
  pull_request:
    branches:
      - Test
      - Prod
    types: [opened, synchronize, reopened]

permissions:
  pull-requests: write

jobs:
  sonarcloud:
    name: SonarCloud code analyze
    runs-on: ubuntu-latest
    if: github.ref_type == 'branch'
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  test_deploy:
    name: Test deploy
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/Test'
    steps:
      - name: executing remote ssh commands
        uses: appleboy/ssh-action@v0.1.9
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.PASSWORD }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            cd ${{ secrets.PROJECT_FOLDER }};
            echo ${{ secrets.SECRET_PHRASE }} | sudo -S git checkout Test;
            echo ${{ secrets.SECRET_PHRASE }} | sudo -S git pull;
            echo ${{ secrets.SECRET_PHRASE }} | sudo -S docker-compose --file docker-compose.yml down;
            echo ${{ secrets.SECRET_PHRASE }} | sudo -S docker-compose --file docker-compose.yml up -d --build;
            echo ${{ secrets.SECRET_PHRASE }} | sudo -S docker system prune --all --force;
  prod_deploy:
    name: Prod deploy
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: executing remote ssh commands
        uses: appleboy/ssh-action@v0.1.9
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.PASSWORD }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            cd ${{ secrets.PROJECT_FOLDER }};
            echo ${{ secrets.SECRET_PHRASE }} | sudo -S git checkout Prod;
            echo ${{ secrets.SECRET_PHRASE }} | sudo -S git pull;
            echo ${{ secrets.SECRET_PHRASE }} | sudo -S docker-compose --file docker-compose.prod.yml down;
            echo ${{ secrets.SECRET_PHRASE }} | sudo -S docker-compose --file docker-compose.prod.yml up -d --build;
            echo ${{ secrets.SECRET_PHRASE }} | sudo -S docker system prune --all --force;